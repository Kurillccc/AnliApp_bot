import sqlite3

table_with_mailling_list = 'maillig_list'

conn = sqlite3.connect('BaseD_anki.db', check_same_thread=False)
cursor = conn.cursor()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (—Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º user_id –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–æ–ª–±—ã)
# –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è, –∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ—Ç
def create_table_and_pass(user_id: int, user_name: str, user_sername: str):
    us_id = "user_" + str(user_id)
    cursor.execute('''CREATE TABLE {}
                (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,
                user_id INTEGER UNIQUE, 
                user_name TEXT,
                user_sername TEXT,
                first_word TEXT,
                second_word TEXT,
                count_of_solves INTEGER,
                co_solves_per_one INTEGER,
                mode INTEGER,
                point INTEGER,
                sol_help INTEGER,
                sorted_matrix TEXT)'''.format(us_id))
    cursor.execute(f'INSERT INTO {us_id} (user_id, user_name, user_sername, count_of_solves, co_solves_per_one, mode, point, sol_help) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', (user_id, user_name, user_sername, 0, 20, 0, 0, 0))
    conn.commit()
# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω—É–∂–Ω–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π (–≤—Å—Ç–∞–≤–∫–∞ —Å–ª–æ–≤)

def pass_words(user_id: int, first_word: str, second_word: str):
    us_id = "user_" + str(user_id)
    cursor.execute(f'INSERT INTO {us_id} (first_word, second_word, point) VALUES (?, ?, ?)', (first_word, second_word, 0))
    conn.commit()
# –§—É–Ω–∫—Ü–∏—è —á—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–µ–Ω–Ω–æ–µ

def pass_value(user_id: int, value, row_number: int, column_name: str):
    us_id = "user_" + str(user_id)
    cursor.execute(f"UPDATE {us_id} SET {column_name}=? WHERE rowid=?", (value, row_number))
    conn.commit()
# –ß–∏—Å–ª–æ –∫–∞—Ä—Ç–æ—á–µ–∫
def count_of_cards(user_id: int):
    us_id = "user_" + str(user_id)
    cursor.execute(f"SELECT * FROM {us_id}")
    return (len(cursor.fetchall())-1)
def array_sum(arr1, arr2):
    result = "".join([f"üìå {a}   -   {b}\n" for a, b in zip(arr1, arr2)])
    return result
# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–æ—â–∞–µ—Ç –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
def show_the_card(user_id: int):
    us_id = "user_" + str(user_id)
    cursor.execute(f"SELECT * FROM {us_id}")
    result = cursor.fetchall()
    del result[0]
    return result
# –í–æ–∑–≤—Ä–æ—â–∞–µ—Ç –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –≤–º–µ—Å—Ç–µ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π
def show_the_first_string(user_id: int):
    us_id = "user_" + str(user_id)
    cursor.execute(f"SELECT * FROM {us_id}")
    result = cursor.fetchall()
    return result
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ–π –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –µ–µ –Ω–æ–º–µ—Ä—É (–Ω—É–º–µ—Ä–∞—Ü–∏—è –∫–∞–∫ –≤ –º–∞—Å—Å–∏–≤–µ)
def show_the_column(user_id: int, i: int):
    # i –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏
    us_id = "user_" + str(user_id)
    cursor.execute(f"SELECT * FROM {us_id}")
    result = cursor.fetchall()
    column_index = i # –∏–Ω–¥–µ–∫—Å –Ω—É–∂–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
    column = [row[column_index] for row in result] # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–ª–æ–Ω–∫–∏
    return column
def show_the_all_table_2(name_of_the_column: str): # —Ç—É—Ç —Å–æ—Ä—Ç–∏—Ä–≤–æ–≤–∫–∞ –ø–æ id –∏–Ω–∞—á–µ –∫–æ–¥ –±—É–¥–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å–µ –≤—ã–¥–∞–≤–∞—Ç—å (–∏–º–µ–Ω–Ω–æ —á–∏—Å–ª–∞)
    cursor.execute(f"SELECT {name_of_the_column} FROM {table_with_mailling_list} ORDER BY id")
    res = cursor.fetchall()  # –∑–∞–ø–∏—Å–∞–ª–∏ —Å—Ç–æ–ª–±–µ—Ü
    result_array = [r[0] for r in res]
    return result_array
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ –∫–æ–ª–æ–¥—ã
def show_the_all_table(user_id: int, name_of_the_table: str):
    us_id = "user_" + str(user_id)
    cursor.execute(f"SELECT {name_of_the_table} FROM {us_id}")
    res = cursor.fetchall() # –∑–∞–ø–∏—Å–∞–ª–∏ —Å—Ç–æ–ª–±–µ—Ü
    result_array = []
    for r in res:
        result_array.append(r[0]) # append –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç
    return result_array
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ–≥–æ –ª–∏–±–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞
def edit_card(user_id: int, name_of_the_table: str, id_of_dest: int, new_value):
    us_id = "user_" + str(user_id)
    cursor.execute(f"UPDATE {us_id} SET {name_of_the_table} = ? WHERE id = ?", (new_value, id_of_dest))
    conn.commit()
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–µ–π–∫–∏ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤ [cat - dog, parrot - scar and ect.]
def glue_two_arrays(arr1, arr2):
# –°–∫–ª–µ–∏–≤–∞–µ–º –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—è zip(), –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±–æ–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤ –≤ –∫–æ—Ä—Ç–µ–∂–∏,
# –∞ –∑–∞—Ç–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä—Ç–µ–∂–µ–π —Å –ø–æ–º–æ—â—å—é —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ `join()`
    result = [arr1 + ' - ' + arr2 for arr1, arr2 in zip(arr1, arr2)]
    return result
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã (start - —Å –∫–∞–∫–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∞—Ç—å (–µ–µ —Å–∞–º—É –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç))
def del_the_deck(user_id: int, start: int): # —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —á—Ç–æ –±–æ–ª—å—à–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ start
    us_id = "user_" + str(user_id)
    sql_query = f"DELETE FROM {us_id} WHERE id >= {start}"
    # –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
    cursor.execute(sql_query)
    conn.commit()
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
def find_word(user_id: int, table_name_1: str, table_name_2: str, word1: str, word2: str):
    us_id = "user_" + str(user_id)
    query = f"SELECT * FROM {us_id} WHERE {table_name_1} LIKE '%{word1}%' AND {table_name_2} LIKE '%{word2}%'"
    cursor.execute(query)
    results = cursor.fetchall()
    return results[0][0] # –≤–æ–∑–≤—Ä–æ—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –¥–≤—É–º—è –Ω—É–∂–Ω—ã–º–∏ –Ω–∞–º —Å–ª–æ–≤–∞–º–∏
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –µ—Å–ª–∏ –º—ã –∑–Ω–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
def dell_card_by_number(user_id: int, row_number: int):
    us_id = "user_" + str(user_id)
    cursor.execute(f'DELETE FROM {us_id} WHERE id = ?', (row_number,))
    conn.commit()
# –§—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ –µ–µ –Ω–æ–º–µ—Ä—É
def show_card_by_number_of_row(user_id: int, row_number: int):
        us_id = "user_" + str(user_id)
        cursor.execute(f'SELECT * FROM {us_id} WHERE rowid = ?', (row_number,))
        row = cursor.fetchone()
        return row
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∂–∏–º–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
def view_mode(user_id: int):
    result = show_the_first_string(user_id)
    if (int(result[0][8]) == 0):
        return "–õ–∏—Ü–µ–≤–∞—è - –æ–±—Ä–∞—Ç–Ω–∞—è"
    elif (int(result[0][8]) == 1):
        return "–û–±—Ä–∞—Ç–Ω–∞—è - –ª–∏—Ü–µ–≤–∞—è"
