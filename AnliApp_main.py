import telebot
import sqlite3
import traceback
import time
from itertools import zip_longest
from telebot import TeleBot, types


token = ''
bot = telebot.TeleBot(token)
id_send = '-1001884350546' # –í –∫–∞–∫–æ–π —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
administrator = 'kurillccc' # –ö–æ–≥–æ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
table_with_mailling_list = 'maillig_list'

conn = sqlite3.connect('BaseD_anki.db', check_same_thread=False)
cursor = conn.cursor()

### –ö–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)
### --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@bot.message_handler(commands=['send'])
def send(message):
    user_name = message.from_user.first_name
    chat_id = message.chat.id
    if (message.from_user.username == administrator):
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("Send to all users", callback_data='all_users')
        btn2 = types.InlineKeyboardButton("Show all users", callback_data='show_all_users')
        btn3 = types.InlineKeyboardButton("Send to one specific user", callback_data='specific_user')
        btn4 = types.InlineKeyboardButton("Close", callback_data='close')
        markup.add(btn1)
        markup.add(btn2)
        markup.add(btn3)
        markup.add(btn4)
        bot.send_message(chat_id, f'Choose an action:', reply_markup=markup)
        bot.callback_query_handler(func=settings_for_administration)
    else:
        bot.send_message(id_send, f'‚ö†Ô∏è@{message.from_user.username} –ø—ã—Ç–∞–ª—Å—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π send ‚ö†Ô∏è\nUser id: {message.from_user.id} \nUser name: {user_name}\nü§ñ: AnliApp_bot ')  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
        return
@bot.callback_query_handler(func=lambda call: call.data in ['all_users', 'show_all_users', 'specific_user', 'close'])
def settings_for_administration(call):
    if (call.data == 'all_users'):
        msg = bot.send_message(call.message.chat.id, f'Write the text:\n(write /stop to stop)')
        bot.register_next_step_handler(msg, all_users_send)
    elif (call.data == 'show_all_users'):
        chat_id = show_the_all_table_2('user_id')
        name = show_the_all_table_2('username')
        result = array_sum(chat_id, name)
        bot.send_message(call.message.chat.id, f'{result}')
    elif (call.data == 'specific_user'):
        msg = bot.send_message(call.message.chat.id, f'Send the user\'s chat id:\n(write /stop to stop)')
        bot.register_next_step_handler(msg, specific_user)
    elif (call.data == 'close'):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        return

# –î–ª—è –æ—Ç—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def all_users_send(message):
    if (message.text == '/stop'):
        return
    text = message.text
    cursor.execute(f"SELECT * FROM {table_with_mailling_list}")
    result = cursor.fetchall()
    column_index = 1  # –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ —Å —á–∞—Ç id
    column = [row[column_index] for row in result]
    if message.photo:
        photo = message.photo[-1]  # –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (–Ω–∞–∏–ª—É—á—à–µ–µ) —Ñ–æ—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞
        file_id = photo.file_id
        file_info = bot.get_file(file_id)
        file = bot.download_file(file_info.file_path)
        for id in column:
            try:
                caption = message.caption if message.caption is not None else ""
                bot.send_photo(id, file, caption=caption, parse_mode='HTML')
            except telebot.apihelper.ApiException as e:
                if e.result.status_code == 403:
                    try:
                        us_id = "user_" + str(id)
                        drop_table = f"DROP TABLE {us_id};"
                        cursor.execute(drop_table)
                        conn.commit()
                    except:
                        pass
    else:
        for id in column:
            try:
                send_message_to_user(id, text)
            except telebot.apihelper.ApiException as e:
                if e.result.status_code == 403:
                    try:
                        us_id = "user_" + str(id)
                        drop_table = f"DROP TABLE {us_id};"
                        cursor.execute(drop_table)
                        conn.commit()
                    except:
                        pass

# –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def specific_user(message):
    if (message.text == "üìç –ù–∞—á–∞—Ç—å") or (message.text == "üîë –ü—Ä–æ—Ñ–∏–ª—å") or (message.text == "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏") or (message.text == "üîî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        return
    if (message.text == '/stop'):
        return
    user_id = int(message.text)
    text = bot.send_message(message.chat.id, f'Write the text\n(write /stop to stop)')
    bot.register_next_step_handler(text, send_text_specific_user, user_id)
def send_text_specific_user(message, user_id):
    if (message.text == '/stop'):
        return
    text = message.text
    if message.photo:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]  # –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (–Ω–∞–∏–ª—É—á—à–µ–µ) —Ñ–æ—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞
        file_id = photo.file_id
        file_info = bot.get_file(file_id)
        file = bot.download_file(file_info.file_path)
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–ª–æ —Å —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            caption = message.caption if message.caption is not None else ""
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_photo(user_id, file, caption=caption, parse_mode='HTML')
        except:
            bot.send_message(message.chat.id, f'Not sent')
            return
        bot.send_message(message.chat.id, f'Successfully')
    else:
        try:
            send_message_to_user(user_id, text)
        except:
            bot.send_message(message.chat.id, f'Not sent')
            return
        bot.send_message(message.chat.id, f'Successfully')

# –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_message_to_user(user_id: int, text: str):
    bot.send_message(user_id, f'{text}', parse_mode="html".format(user_id))

# –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã (—á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ –±–æ—Ç–∞, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é)
def pass_in_maillig_list(user_id: int, username: str, user_name: str, user_sername: str):
    cursor.execute('''CREATE TABLE {}
                            (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,
                            user_id INTEGER UNIQUE,
                            username TEXT,
                            user_name TEXT,
                            user_sername TEXT)'''.format(table_with_mailling_list))
    cursor.execute(f'INSERT INTO {table_with_mailling_list} (user_id, username, user_name, user_sername) VALUES (?, ?, ?, ?)', (user_id, username, user_name, user_sername))
    conn.commit()
#####################
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (—Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º user_id –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–æ–ª–±—ã)
# –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è, –∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ—Ç
def create_table_and_pass(user_id: int, user_name: str, user_sername: str):
    us_id = "user_" + str(user_id)
    cursor.execute('''CREATE TABLE {}
                (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,
                user_id INTEGER UNIQUE, 
                user_name TEXT,
                user_sername TEXT,
                first_word TEXT,
                second_word TEXT,
                count_of_solves INTEGER,
                co_solves_per_one INTEGER,
                mode INTEGER,
                point INTEGER,
                sol_help INTEGER,
                sorted_matrix TEXT)'''.format(us_id))
    cursor.execute(f'INSERT INTO {us_id} (user_id, user_name, user_sername, count_of_solves, co_solves_per_one, mode, point, sol_help) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', (user_id, user_name, user_sername, 0, 20, 0, 0, 0))
    conn.commit()
# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω—É–∂–Ω–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π (–≤—Å—Ç–∞–≤–∫–∞ —Å–ª–æ–≤)
def pass_words(user_id: int, first_word: str, second_word: str):
    us_id = "user_" + str(user_id)
    cursor.execute(f'INSERT INTO {us_id} (first_word, second_word, point) VALUES (?, ?, ?)', (first_word, second_word, 0))
    conn.commit()
# –§—É–Ω–∫—Ü–∏—è —á—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–µ–Ω–Ω–æ–µ
def pass_value(user_id: int, value, row_number: int, column_name: str):
    us_id = "user_" + str(user_id)
    cursor.execute(f"UPDATE {us_id} SET {column_name}=? WHERE rowid=?", (value, row_number))
    conn.commit()
# –ß–∏—Å–ª–æ –∫–∞—Ä—Ç–æ—á–µ–∫
def count_of_cards(user_id: int):
    us_id = "user_" + str(user_id)
    cursor.execute(f"SELECT * FROM {us_id}")
    return (len(cursor.fetchall())-1)
def array_sum(arr1, arr2):
    result = "".join([f"üìå {a}   -   {b}\n" for a, b in zip(arr1, arr2)])
    return result
# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–æ—â–∞–µ—Ç –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
def show_the_card(user_id: int):
    us_id = "user_" + str(user_id)
    cursor.execute(f"SELECT * FROM {us_id}")
    result = cursor.fetchall()
    del result[0]
    return result
# –í–æ–∑–≤—Ä–æ—â–∞–µ—Ç –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –≤–º–µ—Å—Ç–µ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π
def show_the_first_string(user_id: int):
    us_id = "user_" + str(user_id)
    cursor.execute(f"SELECT * FROM {us_id}")
    result = cursor.fetchall()
    return result
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ–π –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –µ–µ –Ω–æ–º–µ—Ä—É (–Ω—É–º–µ—Ä–∞—Ü–∏—è –∫–∞–∫ –≤ –º–∞—Å—Å–∏–≤–µ)
def show_the_column(user_id: int, i: int):
    # i –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏
    us_id = "user_" + str(user_id)
    cursor.execute(f"SELECT * FROM {us_id}")
    result = cursor.fetchall()
    column_index = i # –∏–Ω–¥–µ–∫—Å –Ω—É–∂–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
    column = [row[column_index] for row in result] # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–ª–æ–Ω–∫–∏
    return column
def show_the_all_table_2(name_of_the_column: str): # —Ç—É—Ç —Å–æ—Ä—Ç–∏—Ä–≤–æ–≤–∫–∞ –ø–æ id –∏–Ω–∞—á–µ –∫–æ–¥ –±—É–¥–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å–µ –≤—ã–¥–∞–≤–∞—Ç—å (–∏–º–µ–Ω–Ω–æ —á–∏—Å–ª–∞)
    cursor.execute(f"SELECT {name_of_the_column} FROM {table_with_mailling_list} ORDER BY id")
    res = cursor.fetchall()  # –∑–∞–ø–∏—Å–∞–ª–∏ —Å—Ç–æ–ª–±–µ—Ü
    result_array = [r[0] for r in res]
    return result_array
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ –∫–æ–ª–æ–¥—ã
def show_the_all_table(user_id: int, name_of_the_table: str):
    us_id = "user_" + str(user_id)
    cursor.execute(f"SELECT {name_of_the_table} FROM {us_id}")
    res = cursor.fetchall() # –∑–∞–ø–∏—Å–∞–ª–∏ —Å—Ç–æ–ª–±–µ—Ü
    result_array = []
    for r in res:
        result_array.append(r[0]) # append –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç
    return result_array
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ–≥–æ –ª–∏–±–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞
def edit_card(user_id: int, name_of_the_table: str, id_of_dest: int, new_value):
    us_id = "user_" + str(user_id)
    cursor.execute(f"UPDATE {us_id} SET {name_of_the_table} = ? WHERE id = ?", (new_value, id_of_dest))
    conn.commit()
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–µ–π–∫–∏ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤ [cat - dog, parrot - scar and ect.]
def glue_two_arrays(arr1, arr2):
# –°–∫–ª–µ–∏–≤–∞–µ–º –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—è zip(), –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±–æ–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤ –≤ –∫–æ—Ä—Ç–µ–∂–∏,
# –∞ –∑–∞—Ç–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä—Ç–µ–∂–µ–π —Å –ø–æ–º–æ—â—å—é —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ `join()`
    result = [arr1 + ' - ' + arr2 for arr1, arr2 in zip(arr1, arr2)]
    return result
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã (start - —Å –∫–∞–∫–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∞—Ç—å (–µ–µ —Å–∞–º—É –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç))
def del_the_deck(user_id: int, start: int): # —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —á—Ç–æ –±–æ–ª—å—à–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ start
    us_id = "user_" + str(user_id)
    sql_query = f"DELETE FROM {us_id} WHERE id >= {start}"
    # –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
    cursor.execute(sql_query)
    conn.commit()
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
def find_word(user_id: int, table_name_1: str, table_name_2: str, word1: str, word2: str):
    us_id = "user_" + str(user_id)
    query = f"SELECT * FROM {us_id} WHERE {table_name_1} LIKE '%{word1}%' AND {table_name_2} LIKE '%{word2}%'"
    cursor.execute(query)
    results = cursor.fetchall()
    return results[0][0] # –≤–æ–∑–≤—Ä–æ—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –¥–≤—É–º—è –Ω—É–∂–Ω—ã–º–∏ –Ω–∞–º —Å–ª–æ–≤–∞–º–∏
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –µ—Å–ª–∏ –º—ã –∑–Ω–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
def dell_card_by_number(user_id: int, row_number: int):
    us_id = "user_" + str(user_id)
    cursor.execute(f'DELETE FROM {us_id} WHERE id = ?', (row_number,))
    conn.commit()
# –§—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ –µ–µ –Ω–æ–º–µ—Ä—É
def show_card_by_number_of_row(user_id: int, row_number: int):
        us_id = "user_" + str(user_id)
        cursor.execute(f'SELECT * FROM {us_id} WHERE rowid = ?', (row_number,))
        row = cursor.fetchone()
        return row
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∂–∏–º–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
def view_mode(user_id: int):
    result = show_the_first_string(user_id)
    if (int(result[0][8]) == 0):
        return "–õ–∏—Ü–µ–≤–∞—è - –æ–±—Ä–∞—Ç–Ω–∞—è"
    elif (int(result[0][8]) == 1):
        return "–û–±—Ä–∞—Ç–Ω–∞—è - –ª–∏—Ü–µ–≤–∞—è"
################################################
################################################
# –ù–∞—á–∞–ª–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
@bot.message_handler(commands=['start'])
def start(message):
    username = '@' + message.from_user.username
    user_name = message.from_user.first_name
    chat_id = message.chat.id
    user_sername = message.from_user.last_name
    try:
        cursor.execute(f'INSERT INTO {table_with_mailling_list} (user_id, username, user_name, user_sername) VALUES (?, ?, ?, ?)',(chat_id, username, user_name, user_sername))
        conn.commit()
    except:
        try:
            pass_in_maillig_list(chat_id, username, user_name, user_sername)
        except:
            pass
    if message.from_user.username != administrator:
        bot.send_message(id_send, f'@{message.from_user.username} –Ω–∞–∂–∞–ª(-–∞) "/start"\nUser id: {message.from_user.id} \nUser name: {user_name}\nü§ñ: AnliApp_bot ')  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üìç –ù–∞—á–∞—Ç—å")
    btn2 = types.KeyboardButton("üîë –ü—Ä–æ—Ñ–∏–ª—å")
    btn3 = types.KeyboardButton("üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    btn4 = types.KeyboardButton("üîî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)

    us_id = "user_" + str(chat_id)
    cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name=?", (us_id,))
    result = cursor.fetchone()

    if result:
        bot.send_message(chat_id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!".format(message.from_user),reply_markup=markup)
    else:
        bot.send_message(chat_id, text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", parse_mode="html".format(message.from_user),reply_markup=markup)
        try:
            user_id = message.from_user.id
            user_name = message.from_user.first_name
            user_sername = message.from_user.last_name
            create_table_and_pass(user_id, user_name, user_sername)
        except:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {message.from_user.first_name}, @{user_id}")
            pass
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
@bot.message_handler(content_types=['text'])
def main_window(message):
    chat_id = message.chat.id
    if(message.text == "üìç –ù–∞—á–∞—Ç—å"):
        us_id = "user_" + str(chat_id)
        cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{us_id}';")
        result = cursor.fetchall()
        if len(result) == 0:
            bot.send_message(chat_id, f'–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
            pass_value(chat_id, 0, 1, 'sol_help')
            return
        else:
            pass
        ############################
        pass_value(chat_id, 0, 1, 'sol_help')
        if (int(count_of_cards(chat_id)) != 0):
            result = show_the_first_string(chat_id)
            if (int(result[0][7]) > count_of_cards(chat_id)):
                choice_count = count_of_cards(chat_id)
            else:
                choice_count = int(result[0][7])
            bot.send_message(chat_id, f'<b>–ù–∞—á–∏–Ω–∞—é —Å–µ—Å—Å–∏—é</b>\n–†–µ—à–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ —Ä–µ—à–∏—Ç–µ {choice_count} –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–ª–∏ –Ω–µ –ø—Ä–µ—Ä–≤—ë—Ç–µ —Å–µ—Å—Å–∏—é –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫\n',parse_mode="html".format(chat_id))
            matrix = show_the_card(chat_id)
            sorted_matrix = sorted(matrix, key=lambda x: x[9])
            pass_value(chat_id, str(sorted_matrix), 1, 'sorted_matrix')
            time.sleep(0.5)
            start_solving(chat_id)
        else:
            bot.send_message(chat_id, f'–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É\n<i>(–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏ –≤: –ø—Ä–æ—Ñ–∏–ª—å >> —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É)</i>', parse_mode='html')
    elif (message.text == "üîë –ü—Ä–æ—Ñ–∏–ª—å"):
        us_id = "user_" + str(chat_id)
        cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{us_id}';")
        result = cursor.fetchall()
        if len(result) == 0:
            bot.send_message(chat_id, f'–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
            return
        else:
            pass
        ##############
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        count_of_solving = int((show_the_first_string(chat_id))[0][6])
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data='create_the_card')
        button2 = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–æ–¥—É", callback_data='show_the_card')
        button3 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–æ–¥—É", callback_data='edit_the_deck')
        button4 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–ª–æ–¥—É", callback_data='del_the_deck')
        button5 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='into_main_menu')
        markup.add(button1)
        markup.add(button2)
        markup.add(button3)
        markup.add(button4)
        markup.add(button5)
        bot.send_message(chat_id, f'<U><b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b></U>\n\n–ß–∏—Å–ª–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {count_of_cards(chat_id)}\n–†–µ—à–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤—Å–µ–≥–æ: {count_of_solving}', parse_mode="html".format(chat_id), reply_markup=markup)
        bot.callback_query_handler(func=actions_with_cards)
    elif (message.text == "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏"):
        us_id = "user_" + str(chat_id)
        cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{us_id}';")
        result = cursor.fetchall()
        if len(result) == 0:
            bot.send_message(chat_id, f'–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
            return
        else:
            pass
        ##############################################################
        count_per_ses = int(show_the_first_string(chat_id)[0][7])
        mode = view_mode(chat_id)
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞ —Ä–∞–∑", callback_data='change_co_per')
        button2 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º", callback_data='change_mode')
        button3 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='go_to_main_menu')
        markup.add(button1)
        markup.add(button2)
        markup.add(button3)
        bot.send_message(chat_id, f'<U><b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b></U>\n\n<b>‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞ —Å–µ—Å—Å–∏—é:</b> {count_per_ses}\n<i>(—É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ —á–∏—Å–ª–æ –∫–∞—Ä—Ç–æ—á–µ–∫ > –∏–ª–∏ = {count_per_ses})</i>\n\n<b>‚Ä¢ –†–µ–∂–∏–º –∫–∞—Ä—Ç–æ—á–µ–∫:</b> {mode}', parse_mode="html".format(message.chat.id), reply_markup=markup)
        bot.callback_query_handler(func=settings)
    elif (message.text == "üîî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        us_id = "user_" + str(chat_id)
        cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{us_id}';")
        result = cursor.fetchall()
        if len(result) == 0:
            bot.send_message(chat_id, f'–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
            return
        else:
            pass
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url='https://t.me/kurillccc')
        markup.add(button1)
        bot.send_message(chat_id, f'<U><b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b></U>\n\nAnli App - —ç—Ç–æ –±–æ—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ 1000 –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –Ω–∏—Ö —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã, –∞ —Ç–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.\n\n–í —Ü–µ–ª–æ–º, Anli App - —ç—Ç–æ —É–¥–æ–±–Ω—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É—á–∏—Ç—å—Å—è –∏ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–∞—Ä—Ç–æ—á–µ–∫.'.format(message.from_user), parse_mode="html", reply_markup=markup)
        return

# –î–∞–ª–µ–µ –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –±–æ—Ç–∞ —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º–∏
@bot.callback_query_handler(func=lambda call: call.data in ['create_the_card', 'show_the_card', 'del_the_deck', 'edit_the_deck', 'accept.del', 'decline.del', 'edit_the_card_new', 'into_main_menu'])
def actions_with_cards(call):
    if call.message:
        if call.data == 'create_the_card':
            if (count_of_cards(call.message.chat.id) < 1200):
                msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text='–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ:', reply_markup=None)
                bot.register_next_step_handler(msg, ask_next_word)
            else:
                bot.send_message(chat_id=call.message.chat.id, text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ –∫–∞—Ä—Ç–æ—á–µ–∫\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É')
        elif call.data == 'show_the_card':
            if (count_of_cards(call.message.chat.id) == 0):
                bot.send_message(chat_id=call.message.chat.id, text=f'–í–∞—à–∞ –∫–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞')
                return
            words_one = show_the_all_table(call.message.chat.id, 'first_word')
            words_two = show_the_all_table(call.message.chat.id, 'second_word')
            del words_one[0]
            del words_two[0]
            result = array_sum(words_one, words_two)
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='come_back')
            markup.add(button1)
            if (len(result) < 4061):
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=  f'<b>–õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ - —Ç—ã–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞</b>\n{result}', parse_mode="html".format(call.message.chat.id), reply_markup=markup)
            elif (len(result) > 4060 and len(result) < 8000):
                # –µ—Å–ª–∏ —á–∏—Å–ª–æ —Å–∏–≤–æ–ª–æ–≤ –ø—Ä–∏–≤—ã—à–∞–µ—Ç —Ç–æ –¥–µ–ª–µ–º –Ω–∞ 2
                result1 = result[:len(result)//2]
                result2 = result[len(result)//2:]
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=  f'<b>–õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ - —Ç—ã–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞</b>\n{result1}', parse_mode="html".format(call.message.chat.id))
                bot.send_message(chat_id=call.message.chat.id, text=  f'{result2}', parse_mode="html".format(call.message.chat.id), reply_markup=markup)
            elif (len(result) > 7999 and len(result) < 16000):
                result1 = result[:len(result) // 2]
                result2 = result[len(result) // 2:]

                result1_1 = result1[:len(result1) // 2]
                result1_2 = result1[len(result1) // 2:]
                result2_1 = result2[:len(result2) // 2]
                result2_2 = result2[len(result2) // 2:]
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text=f'<b>–õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ - —Ç—ã–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞</b>\n{result1_1}',parse_mode="html".format(call.message.chat.id))
                bot.send_message(chat_id=call.message.chat.id, text=f'{result1_2}',parse_mode="html".format(call.message.chat.id))
                bot.send_message(chat_id=call.message.chat.id, text=f'{result2_1}',parse_mode="html".format(call.message.chat.id))
                bot.send_message(chat_id=call.message.chat.id, text=f'{result2_2}',parse_mode="html".format(call.message.chat.id), reply_markup=markup)
            else:
                bot.send_message(chat_id=call.message.chat.id, text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã–≤–µ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É',parse_mode="html".format(call.message.chat.id), reply_markup=markup)
            bot.callback_query_handler(func=actions_with_cards)
        elif call.data == 'edit_the_deck':
            if (count_of_cards(call.message.chat.id) == 0):
                bot.send_message(chat_id=call.message.chat.id,text=f'–í–∞—à–∞ –∫–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞')
                return
            array1 = show_the_all_table(call.message.chat.id, 'first_word')
            array2 = show_the_all_table(call.message.chat.id, 'second_word')
            del array1[0]
            del array2[0] # –£–¥–∞–ª—è–µ–º —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ none_type
            arr = glue_two_arrays(array1, array2)
            result = '\n'.join([f"<b><i>{i + 1})</i></b> {elem}" for i, elem in enumerate(arr)])
            if (len(result) < 4061):
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text=f'{result}',parse_mode="html".format(call.message.chat.id), reply_markup=None)
                msg = bot.send_message(chat_id=call.message.chat.id, text=f'<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:</b>',parse_mode="html".format(call.message.chat.id))
            elif (len(result) > 4060 and len(result) < 8000):
                #–µ—Å–ª–∏ —á–∏—Å–ª–æ —Å–∏–≤–æ–ª–æ–≤ –ø—Ä–∏–≤—ã—à–∞–µ—Ç —Ç–æ –¥–µ–ª–µ–º –Ω–∞ 2
                bot.send_message(chat_id=call.message.chat.id, text=f'{len(result)}')
                result1 = result[:len(result)//2]
                result2 = result[len(result)//2:]
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text=f'{result1}',parse_mode="html".format(call.message.chat.id), reply_markup=None)
                bot.send_message(chat_id=call.message.chat.id, text=  f'{result2}', parse_mode="html".format(call.message.chat.id), reply_markup=None)
                msg = bot.send_message(chat_id=call.message.chat.id, text=f'<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:</b>',parse_mode="html".format(call.message.chat.id))
            elif (len(result) > 7999 and len(result) < 16000):
                result1 = result[:len(result) // 2]
                result2 = result[len(result) // 2:]

                result1_1 = result1[:len(result1) // 2]
                result1_2 = result1[len(result1) // 2:]
                result2_1 = result2[:len(result2) // 2]
                result2_2 = result2[len(result2) // 2:]
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text=f'{result1_1}',parse_mode="html".format(call.message.chat.id), reply_markup=None)
                bot.send_message(chat_id=call.message.chat.id, text=f'{result1_2}',parse_mode="html".format(call.message.chat.id))
                bot.send_message(chat_id=call.message.chat.id, text=f'{result2_1}',parse_mode="html".format(call.message.chat.id))
                bot.send_message(chat_id=call.message.chat.id, text=f'{result2_2}',parse_mode="html".format(call.message.chat.id))
                msg = bot.send_message(chat_id=call.message.chat.id, text=f'<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:</b>',parse_mode="html".format(call.message.chat.id))
            else:
                bot.send_message(chat_id=call.message.chat.id, text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã–≤–µ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É',parse_mode="html".format(call.message.chat.id), reply_markup=markup)
            bot.register_next_step_handler(msg, the_number_of_card, arr)
        elif call.data == 'come_back':
            count_of_solving = int((show_the_first_string(call.message.chat.id))[0][6])
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data='create_the_card')
            button2 = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–æ–¥—É", callback_data='show_the_card')
            button3 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–æ–¥—É", callback_data='edit_the_deck')
            button4 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–ª–æ–¥—É", callback_data='del_the_deck')
            button5 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='into_main_menu')
            markup.add(button1)
            markup.add(button2)
            markup.add(button3)
            markup.add(button4)
            markup.add(button5)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<U><b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b></U>\n\n–ß–∏—Å–ª–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {count_of_cards(call.message.chat.id)}\n–†–µ—à–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤—Å–µ–≥–æ: {count_of_solving}', parse_mode="html".format(call.message.chat.id), reply_markup=markup)
            # –≤ —á–∏—Å–ª–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–æ–∏—Ç –º–∏–Ω—É—Å —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è —É –Ω–∞—Å —Å–æ–∑–¥–∞–µ—Ç—Å—è
            # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            bot.callback_query_handler(func=actions_with_cards)
        elif call.data == 'del_the_deck':
            #    –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ–π –∫–æ–ª–æ–¥—ã
            if (count_of_cards(call.message.chat.id) > 0):
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("‚úÖ –î–∞", callback_data='accept.del')
                button2 = types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data='decline.del')
                markup.add(button1, button2)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏?', reply_markup=markup)
                bot.callback_query_handler(func=actions_with_cards)
            else:
                bot.send_message(chat_id=call.message.chat.id, text=f'–í–∞—à–∞ –∫–æ–ª–æ–¥–∞ –∏—Ç–∞–∫ –ø—É—Å—Ç–∞')
                return
        elif call.data == 'accept.del':
            count = count_of_cards(call.message.chat.id)
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='come_back')
            markup.add(button1)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text=f'–ö–æ–ª–æ–¥–∞ –∏–∑ {count_of_cards(call.message.chat.id)} –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', reply_markup=markup)
            del_the_deck(call.message.chat.id, 2)
            bot.callback_query_handler(func=actions_after_creating_the_cards)
        elif call.data == 'decline.del':
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='come_back')
            markup.add(button1)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text='–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=markup)
            bot.callback_query_handler(func=actions_after_creating_the_cards)
        elif call.data == 'into_main_menu':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text=f'<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>', parse_mode="html".format(call.message.chat.id), reply_markup=None)
            return
# –¢—É—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
@bot.callback_query_handler(func=lambda call: call.data in ['continue_creating_cards', 'edit_the_card', 'come_back'])
def actions_after_creating_the_cards(call):
    if call.message:
        if call.data == 'continue_creating_cards':
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,reply_markup=None)
            msg = bot.send_message(chat_id=call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ:', reply_markup=None)
            bot.register_next_step_handler(msg, ask_next_word)
        elif call.data == 'edit_the_card':
            msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text='–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ:', reply_markup=None)
            bot.register_next_step_handler(msg, ask_next_new_word)
        elif call.data == 'come_back':
            count_of_solving = int((show_the_first_string(call.message.chat.id))[0][6])
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data='create_the_card')
            button2 = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–æ–¥—É", callback_data='show_the_card')
            button3 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–æ–¥—É", callback_data='edit_the_deck')
            button4 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–ª–æ–¥—É", callback_data='del_the_deck')
            button5 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='into_main_menu')
            markup.add(button1)
            markup.add(button2)
            markup.add(button3)
            markup.add(button4)
            markup.add(button5)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text=f'<U><b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b></U>\n\n–ß–∏—Å–ª–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {count_of_cards(call.message.chat.id)}\n–†–µ—à–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤—Å–µ–≥–æ: {count_of_solving}', parse_mode="html".format(call.message.chat.id), reply_markup=markup)
            # –≤ —á–∏—Å–ª–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–æ–∏—Ç –º–∏–Ω—É—Å —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è —É –Ω–∞—Å —Å–æ–∑–¥–∞–µ—Ç—Å—è
            # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            bot.callback_query_handler(func=actions_with_cards)
###########################################################
def ask_next_word(message):
    if (message.text == "üìç –ù–∞—á–∞—Ç—å") or (message.text == "üîë –ü—Ä–æ—Ñ–∏–ª—å") or (message.text == "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏") or (message.text == "üîî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        bot.send_message(message.chat.id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞")
        return
    if (len(message.text) > 70):
        bot.send_message(message.chat.id, "–°–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!")
        return
    first_word = message.text
    msg = bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ:")
    bot.register_next_step_handler(msg, save_card, first_word)
def save_card(message, first_word):
    if (message.text == "üìç –ù–∞—á–∞—Ç—å") or (message.text == "üîë –ü—Ä–æ—Ñ–∏–ª—å") or (message.text == "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏") or (message.text == "üîî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        bot.send_message(message.chat.id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞")
        return
    if (len(message.text) > 70):
        bot.send_message(message.chat.id, "–°–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!")
        return
    second_word = message.text
    user_id = message.from_user.id
    pass_words(user_id , first_word, second_word)
    conn.commit()
    # –í—ã–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='continue_creating_cards')
    button2 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data='edit_the_card')
    button3 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='come_back')
    records = show_the_card(message.chat.id) # —Ç—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –∞ —Å –ø–æ–º–æ—â—å—é
                                             # records[2] –º—ã –º–æ–∂–µ–º –≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ—á–∫—É,
                                             # –Ω–æ –Ω–∞–º –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –∞ –Ω–µ —Å—Ç—Ä–æ—á–∫—É
    markup.add(button1, button2,button3)  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –Ω—É–∂–Ω–æ
                                          # –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å (callback_data), —á—Ç–æ–±—ã –ø–æ—Ç–æ–º
                                          # —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤—ã–±–æ—Ä–∫—É
    bot.send_message(message.chat.id, f'–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n{records[-1][-8]} - {records[-1][-7]}', reply_markup=markup)
    bot.callback_query_handler(func=actions_after_creating_the_cards)
# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
def ask_next_new_word(message):
    if (message.text == "üìç –ù–∞—á–∞—Ç—å") or (message.text == "üîë –ü—Ä–æ—Ñ–∏–ª—å") or (message.text == "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏") or (message.text == "üîî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        bot.send_message(message.chat.id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞")
        return
    if (len(message.text) > 55):
        bot.send_message(message.chat.id, "–°–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!")
        return
    first_new_word = message.text
    msg = bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ:")
    bot.register_next_step_handler(msg, save_new_card, first_new_word)
def save_new_card(message, first_new_word):
    if (message.text == "üìç –ù–∞—á–∞—Ç—å") or (message.text == "üîë –ü—Ä–æ—Ñ–∏–ª—å") or (message.text == "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏") or (message.text == "üîî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        bot.send_message(message.chat.id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞")
        return
    if (len(message.text) > 55):
        bot.send_message(message.chat.id, "–°–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!")
        return
    new_word_1 = first_new_word
    new_word_2 = message.text
    edit_card(message.chat.id, "first_word",  cursor.lastrowid, new_word_1) # –§—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ
    edit_card(message.chat.id, "second_word",  cursor.lastrowid, new_word_2)
    edit_card(message.chat.id, "point", cursor.lastrowid, 0)
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='continue_creating_cards')
    button2 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data='edit_the_card')
    button3 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='come_back')
    records = show_the_card(message.chat.id)  # —Ç—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –∞ —Å –ø–æ–º–æ—â—å—é
                                              # records[2] –º—ã –º–æ–∂–µ–º –≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ—á–∫—É,
                                              # –Ω–æ –Ω–∞–º –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –∞ –Ω–µ —Å—Ç—Ä–æ—á–∫—É
    markup.add(button1, button2,button3)  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å
                                          # (callback_data), —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤—ã–±–æ—Ä–∫—É
    bot.send_message(message.chat.id, f'–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n{records[-1][-8]} - {records[-1][-7]}',reply_markup=markup)
    bot.callback_query_handler(func=actions_after_creating_the_cards)
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –ø–æ –¥–≤—É–º —Å–ª–æ–≤–∞–º –∏–∑ –∫–æ–ª–æ–¥—ã
def the_number_of_card(message, arr):
    try:
        number = int(message.text) - 1
    except:
        bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n(–≤–≤–æ–¥–∏—Ç—å—Å—è –¥–æ–ª–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)')
        return
    if (len(message.text) > 9):
        bot.send_message(message.chat.id, "–ß–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!")
        return
    try:
        first_word_ = arr[number].split("-")[0].strip() # –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ –∫–∞–∫–æ–º —Ç–æ —ç–ª–µ–º–µ–Ω—Ç–µ
        second_word_ = arr[number].split("-")[1].strip() # –¥–æ —Å–∏–º–≤–æ–ª–∞ "-"
    except:
        bot.send_message(message.chat.id, f'–ù–æ–º–µ—Ä–∞ –¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return
    number_of_string = find_word(message.chat.id, 'first_word', 'second_word', first_word_, second_word_)
    records = show_the_card(message.chat.id)
    # –í—ã–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ –Ω–∞–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —á—Ç–æ —Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å
    callback_data1 = f'button_pressed_del:{number_of_string}'
    callback_data2 = f'button_pressed_edit:{number_of_string}' # –î–µ–ª–∞—é —Ç–∞–∫ —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤ inline –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=callback_data1)
    button2 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=callback_data2)
    button3 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='come_back')
    records = show_the_card(message.chat.id)  # —Ç—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –∞ —Å –ø–æ–º–æ—â—å—é
    # records[2] –º—ã –º–æ–∂–µ–º –≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ—á–∫—É,
    # –Ω–æ –Ω–∞–º –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –∞ –Ω–µ —Å—Ç—Ä–æ—á–∫—É
    markup.add(button2, button1, button3)  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –Ω—É–∂–Ω–æ
    # –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å (callback_data), —á—Ç–æ–±—ã –ø–æ—Ç–æ–º
    # —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤—ã–±–æ—Ä–∫—É
    bot.send_message(message.chat.id, f'{number+1}) {records[number][-8]} - {records[number][-7]}',reply_markup=markup)
    bot.callback_query_handler(func=inline_button_after_edit_deck)

def edit_the_card_new_1(message, number_of_string):
    if (message.text == "üìç –ù–∞—á–∞—Ç—å") or (message.text == "üîë –ü—Ä–æ—Ñ–∏–ª—å") or (message.text == "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏") or (message.text == "üîî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        bot.send_message(message.chat.id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞")
        return
    first_word_1 = message.text
    if (len(message.text) > 55):
        bot.send_message(message.chat.id, "–°–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!")
        return
    msg = bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ:")
    bot.register_next_step_handler(msg, edit_the_card_new_2, first_word_1, number_of_string)
def edit_the_card_new_2(message, first_word_1, number_of_string):
    if (message.text == "üìç –ù–∞—á–∞—Ç—å") or (message.text == "üîë –ü—Ä–æ—Ñ–∏–ª—å") or (message.text == "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏") or (message.text == "üîî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        bot.send_message(message.chat.id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞")
        return
    if (len(message.text) > 55):
        bot.send_message(message.chat.id, "–°–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!")
        return
    second_word_1 = message.text
    user_id = message.from_user.id
    edit_card(user_id, 'first_word', number_of_string, first_word_1)
    edit_card(user_id, 'second_word', number_of_string, second_word_1)
    edit_card(message.chat.id, "point", number_of_string, 0)
    conn.commit()
    # –í—ã–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='edit_the_deck')
    button3 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='come_back')
    records = show_the_card(message.chat.id) # —Ç—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –∞ —Å –ø–æ–º–æ—â—å—é
                                             # records[2] –º—ã –º–æ–∂–µ–º –≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ—á–∫—É,
                                             # –Ω–æ –Ω–∞–º –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –∞ –Ω–µ —Å—Ç—Ä–æ—á–∫—É
    markup.add(button1, button3)  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –Ω—É–∂–Ω–æ
                                          # –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å (callback_data), —á—Ç–æ–±—ã –ø–æ—Ç–æ–º
                                          # —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤—ã–±–æ—Ä–∫—É
    bot.send_message(message.chat.id, f'–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n{first_word_1} - {second_word_1}', reply_markup=markup)
    bot.callback_query_handler(func=actions_with_cards)
# –î–∞–ª–µ–µ –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å - —Ä–µ—à–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —ç—Ç–∏–º –∫–∞—Ä—Ç–æ—á–∫–∞–º
@bot.callback_query_handler(func=lambda call: call.data in ['change_co_per', 'change_mode', 'go_to_main_menu', 'go_to_settings'])
def settings(call):
    if call.message:
        if call.data == 'change_co_per':
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("10", callback_data='10')
            button2 = types.InlineKeyboardButton("15", callback_data='15')
            button3 = types.InlineKeyboardButton("20", callback_data='20')
            button4 = types.InlineKeyboardButton("–°–≤–æ–µ —á–∏—Å–ª–æ", callback_data='Own')
            button5 = types.InlineKeyboardButton("–í—Å—è –∫–æ–ª–æ–¥–∞", callback_data='All')
            button6 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='come_back_into_settings')
            markup.add(button1, button2, button3)
            markup.add(button4, button5, button6)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text='–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ä–µ—à–∏–≤–∞–Ω–∏–π –∑–∞ —Ä–∞–∑:', reply_markup=markup)
            bot.callback_query_handler(func=actions_with_settings)
        elif call.data == 'change_mode':
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("–õ–∏—Ü–µ–≤–∞—è - –æ–±—Ä–∞—Ç–Ω–∞—è", callback_data='standart_mode')
            button2 = types.InlineKeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è - –ª–∏—Ü–µ–≤–∞—è", callback_data='revers_mode')
            button3 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='come_back_into_settings')
            markup.add(button1)
            markup.add(button2)
            markup.add(button3)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text=f'<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:</b>',parse_mode="html".format(call.message.chat.id), reply_markup=markup)
            bot.callback_query_handler(func=actions_with_settings)
        elif call.data == 'go_to_main_menu':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text=f'<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>', parse_mode="html".format(call.message.chat.id), reply_markup=None)
            return

@bot.callback_query_handler(func=lambda call: call.data in ['10', '15', '20', '10', 'Own', 'All', 'come_back_into_settings', 'standart_mode', 'revers_mode'])
def actions_with_settings(call):
    if call.message:
        if call.data == '10':
            edit_card(call.message.chat.id, 'co_solves_per_one', 1, 10)
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='change_co_per')
            markup.add(button1)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ä–µ—à–∏–≤–∞–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: 10',parse_mode="html".format(call.message.chat.id), reply_markup=markup)
            bot.callback_query_handler(func=settings)
        elif call.data == '15':
            edit_card(call.message.chat.id, 'co_solves_per_one', 1, 15)
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='change_co_per')
            markup.add(button1)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ä–µ—à–∏–≤–∞–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: 15',parse_mode="html".format(call.message.chat.id), reply_markup=markup)
            bot.callback_query_handler(func=settings)
        elif call.data == '20':
            edit_card(call.message.chat.id, 'co_solves_per_one', 1, 20)
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='change_co_per')
            markup.add(button1)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ä–µ—à–∏–≤–∞–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: 20',parse_mode="html".format(call.message.chat.id), reply_markup=markup)
            bot.callback_query_handler(func=settings)
        elif call.data == 'Own':
            count = count_of_cards(call.message.chat.id)
            msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text=f'–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', parse_mode="html".format(call.message.chat.id), reply_markup=None)
            bot.register_next_step_handler(msg, wanted_count, count)
        elif call.data == 'All':
            count = count_of_cards(call.message.chat.id)
            edit_card(call.message.chat.id, 'co_solves_per_one', 1, count)
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='change_co_per')
            markup.add(button1)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ä–µ—à–∏–≤–∞–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {count}',parse_mode="html".format(call.message.chat.id), reply_markup=markup)
            bot.callback_query_handler(func=settings)
        elif call.data == 'come_back_into_settings':
            count_per_ses = int(show_the_first_string(call.message.chat.id)[0][7])
            mode = view_mode(call.message.chat.id)
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞ —Ä–∞–∑", callback_data='change_co_per')
            button2 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º", callback_data='change_mode')
            button3 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='go_to_main_menu')
            markup.add(button1)
            markup.add(button2)
            markup.add(button3)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<U><b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b></U>\n\n<b>‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞ —Å–µ—Å—Å–∏—é:</b> {count_per_ses}\n<i>(—É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ —á–∏—Å–ª–æ –∫–∞—Ä—Ç–æ—á–µ–∫ > –∏–ª–∏ = {count_per_ses})</i>\n\n<b>‚Ä¢ –†–µ–∂–∏–º –∫–∞—Ä—Ç–æ—á–µ–∫:</b> {mode}',parse_mode="html".format(call.message.chat.id), reply_markup=markup)
            bot.callback_query_handler(func=settings)
        elif call.data == 'standart_mode':
            result = show_the_first_string(call.message.chat.id)
            # –ï—Å–ª–∏ —Ä–µ–∂–∏–º —É–∂–µ —Ç–∞–∫–æ–π
            if (int(result[0][8]) == 0):
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='change_mode')
                markup.add(button1)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text=f'–≠—Ç–æ—Ç —Ä–µ–∂–∏–º —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º —Ç–µ–∫—É—â–∏–º',parse_mode="html".format(call.message.chat.id), reply_markup=markup)
                bot.callback_query_handler(func=settings)
            # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å
            elif (int(result[0][8]) == 1):
                edit_card(call.message.chat.id, 'mode', 1, 0)
                mode = view_mode(call.message.chat.id)
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='change_mode')
                markup.add(button1)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b>–†–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:</b> \n{mode}',parse_mode="html".format(call.message.chat.id), reply_markup=markup)
                bot.callback_query_handler(func=settings)
        elif call.data == 'revers_mode':
            result = show_the_first_string(call.message.chat.id)
            if (int(result[0][8]) == 1):
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='change_mode')
                markup.add(button1)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–≠—Ç–æ—Ç —Ä–µ–∂–∏–º —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º —Ç–µ–∫—É—â–∏–º',parse_mode="html".format(call.message.chat.id), reply_markup=markup)
                bot.callback_query_handler(func=settings)
            elif (int(result[0][8]) == 0):
                edit_card(call.message.chat.id, 'mode', 1, 1)
                mode = view_mode(call.message.chat.id)
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='change_mode')
                markup.add(button1)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b>–†–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:</b> \n{mode}',parse_mode="html".format(call.message.chat.id), reply_markup=markup)
                bot.callback_query_handler(func=settings)
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è wanted_count
def wanted_count(message, count):
    try:
        wanted_count = int(message.text)
    except:
        bot.send_message(message.chat.id, text="–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ (—á–∏—Å–ª–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º)")
        return
    if (int(wanted_count) < 1):
        bot.send_message(message.chat.id, text="–ñ–µ–ª–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –Ω—É–ª—è –∏–ª–∏ —Ä–∞–≤–Ω–æ –µ–º—É")
        return
    try:
        edit_card(message.chat.id, 'co_solves_per_one', 1, wanted_count)
    except:
        bot.send_message(message.chat.id, text="–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏")
        return
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='change_co_per')
    markup.add(button1)
    bot.send_message(message.chat.id, text=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ä–µ—à–∏–≤–∞–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {wanted_count}',parse_mode="html".format(message.chat.id), reply_markup=markup)
    bot.callback_query_handler(func=settings)
# inline —Ñ—É–Ω–∫—Ü–∏—è —Å –Ω–∞—á–∞–ª–æ–º —Ä–µ—à–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —á—Ç–æ–±—ã –±—ã–ª —Ü–∏–∫–ª

def start_solving(mes):
    result = show_the_first_string(mes)
    mode = int(result[0][8])
    if (int(result[0][7]) > count_of_cards(mes)):
        choice_count = count_of_cards(mes)
    else:
        choice_count = int(result[0][7])
    # eval –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç –µ–µ –∫–∞–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ Python
    sorted_matrix = eval(show_the_first_string(mes)[0][11])
    sol_help = int((show_card_by_number_of_row(mes, 1))[10])
    if (choice_count > sol_help):
        # –ë–µ—Ä–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏ —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω–∞–¥–æ —á—Ç–æ–±—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –æ–Ω–∞
        # –ø—Ä–µ–¥–∞–≤–∞–ª–∞—Å—å, —Ç–æ –¥–µ–ª–∞–µ–º –∫–∞–∫ –¥–µ–ª–∞–ª–∏ —Ä–∞–Ω–µ–µ
        number_of_string = sorted_matrix[sol_help][0]
        callback_data1 = f'button_pressed_flip:{number_of_string}'
        callback_data2 = f'button_pressed_stop:'
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å", callback_data=callback_data1)
        button2 = types.InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data=callback_data2)
        markup.add(button1)
        markup.add(button2)
        if (mode == 0):
            bot.send_message(mes, f'{sol_help + 1}) {sorted_matrix[sol_help][4]}', reply_markup=markup)
            bot.callback_query_handler(func=inline_button_after_edit_deck)
        elif (mode == 1):
            bot.send_message(mes, f'{sol_help + 1}) {sorted_matrix[sol_help][5]}', reply_markup=markup)
            bot.callback_query_handler(func=inline_button_after_edit_deck)
        else:
            bot.send_message(chat_id=chat_id, text=f'–†–µ–∂–∏–º –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –æ—à–∏–±–∫–∞\n(–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ @kurillccc)')
            print("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞")
    else:
        if (sol_help == 0):
            bot.send_message(mes, f'–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –í—ã —Ä–µ—à–∏–ª–∏ {sol_help} –∫–∞—Ä—Ç–æ—á–µ–∫\n(–ü—Ä–æ—à—É –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –í–∞–º–∏ —á–∏—Å–ª–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞ —Å–µ—Å—Å–∏—é —Ä–∞–≤–Ω–æ 0, –ø–æ—ç—Ç–æ–º—É –í—ã –Ω–µ —É–≤–∏–¥–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏)', reply_markup=None)
        else:
            bot.send_message(mes, f'–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –í—ã —Ä–µ—à–∏–ª–∏ {sol_help} –∫–∞—Ä—Ç–æ—á–µ–∫', reply_markup=None)
        pass_value(mes, 0, 1, 'sol_help')
        return
###########################################################
# –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä - –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
# –¥–∞–ª–µ–µ –ø—Ä–æ—Å—Ç–æ –¥–æ—Å—Ç–∞–µ–º –∏–∑ call.data —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
@bot.callback_query_handler(func=lambda call: True)
def inline_button_after_edit_deck(call):
    sol_help = int((show_card_by_number_of_row(call.message.chat.id, 1))[10]) + 1
    chat_id = call.message.chat.id
    if call.data.startswith('button_pressed_del:'):
        # –ø–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ callback_data
        number_of_string = int(call.data.split(':')[1])
        dell_card_by_number(chat_id, number_of_string)
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='come_back')
        markup.add(button1)
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=f'–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', reply_markup=markup)
        bot.callback_query_handler(func=actions_with_cards)
    elif call.data.startswith('button_pressed_edit:'):
        # –ø–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ callback_data
        number_of_string = int(call.data.split(':')[1])
        msg = bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text='–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ:', reply_markup=None)
        bot.register_next_step_handler(msg, edit_the_card_new_1, number_of_string)
    elif call.data.startswith('button_pressed_flip:'):
        # –ø–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ callback_data
        number_of_string = int(call.data.split(':')[1])
        callback_data1 = f'button_pressed_bad:{number_of_string}'
        callback_data2 = f'button_pressed_normal:{number_of_string}'
        callback_data3 = f'button_pressed_good:{number_of_string}'
        callback_data4 = f'button_pressed_great:{number_of_string}'
        callback_data5 = f'button_pressed_stop:'
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("üî¥ –ü–ª–æ—Ö–æ", callback_data=callback_data1)
        button2 = types.InlineKeyboardButton("üü† –¢—Ä—É–¥–Ω–æ", callback_data=callback_data2)
        button3 = types.InlineKeyboardButton("üîµ –•–æ—Ä–æ—à–æ", callback_data=callback_data3)
        button4 = types.InlineKeyboardButton("üü¢ –û—Ç–ª–∏—á–Ω–æ", callback_data=callback_data4)
        button5 = types.InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data=callback_data5)
        markup.add(button1, button2, button3)
        markup.add(button4)
        markup.add(button5)
        # –°–º–æ—Ç—Ä–∏–º mode –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–∞—à—É —Å—Ç—Ä–æ–∫—É
        row = show_card_by_number_of_row(chat_id, number_of_string)
        mode = int((show_the_first_string(chat_id))[0][8])
        if (mode == 0):
            bot.edit_message_text(chat_id=chat_id,message_id=call.message.message_id,text=f'{sol_help}) {row[4]} - {row[5]}', reply_markup=markup)
            bot.callback_query_handler(func=inline_button_after_edit_deck)
        elif (mode == 1):
            bot.edit_message_text(chat_id=chat_id,message_id=call.message.message_id,text=f'{sol_help}) {row[5]} - {row[4]}', reply_markup=markup)
            bot.callback_query_handler(func=inline_button_after_edit_deck)
        else:
            bot.send_message(chat_id=chat_id, text=f'–†–µ–∂–∏–º –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –æ—à–∏–±–∫–∞\n(–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ @kurillccc)')
            print("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞")
    elif call.data.startswith('button_pressed_stop:'):
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=f'–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ, –í—ã —Ä–µ—à–∏–ª–∏ {sol_help-1} –∫–∞—Ä—Ç–æ—á–µ–∫', reply_markup=None)
        pass_value(chat_id, 0, 1, 'sol_help')
        return
    # –ö—Ä—É–∂–æ—á–∫–∏ —Ç–æ –µ—Å—Ç—å –æ—Ü–µ–Ω–∏–≤–∞–µ–º —Ç–æ –∫–∞–∫ —Ä–µ—à–∏–ª–∏ —Å–ª–æ–≤–æ
#üî¥
    elif call.data.startswith('button_pressed_bad:'):
        number_of_string = int(call.data.split(':')[1])
        # —Å–º–æ—Ç—Ä–∏–º –æ—á–∫–∏ —á—Ç–æ–±—ã —Å–ª–æ–∂–∏—Ç—å –∏–ª–∏ –≤—ã—á–µ—Å—Ç—å
        result = int((show_card_by_number_of_row(chat_id, number_of_string)[9]))
        result -= 10
        pass_value(chat_id, result, number_of_string, 'point')
        sol_help = int((show_card_by_number_of_row(chat_id, 1))[10])
        sol_help += 1
        pass_value(chat_id, sol_help, 1, 'sol_help')
        count_of_solves = int((show_card_by_number_of_row(chat_id, 1))[6])
        count_of_solves += 1
        pass_value(call.message.chat.id, count_of_solves, 1, 'count_of_solves')
        bot.delete_message(chat_id, call.message.message_id)
        start_solving(chat_id)
 #üü†
    elif call.data.startswith('button_pressed_normal:'):
        number_of_string = int(call.data.split(':')[1])
        # —Å–º–æ—Ç—Ä–∏–º –æ—á–∫–∏ —á—Ç–æ–±—ã —Å–ª–æ–∂–∏—Ç—å –∏–ª–∏ –≤—ã—á–µ—Å—Ç—å
        result = int((show_card_by_number_of_row(chat_id, number_of_string)[9]))
        result -= 5
        pass_value(chat_id, result, number_of_string, 'point')
        sol_help = int((show_card_by_number_of_row(chat_id, 1))[10])
        sol_help += 1
        pass_value(chat_id, sol_help, 1, 'sol_help')
        count_of_solves = int((show_card_by_number_of_row(chat_id, 1))[6])
        count_of_solves += 1
        pass_value(call.message.chat.id, count_of_solves, 1, 'count_of_solves')
        bot.delete_message(chat_id, call.message.message_id)
        start_solving(chat_id)
#üîµ
    elif call.data.startswith('button_pressed_good:'):
        number_of_string = int(call.data.split(':')[1])
        # —Å–º–æ—Ç—Ä–∏–º –æ—á–∫–∏ —á—Ç–æ–±—ã —Å–ª–æ–∂–∏—Ç—å –∏–ª–∏ –≤—ã—á–µ—Å—Ç—å
        result = int((show_card_by_number_of_row(chat_id, number_of_string)[9]))
        result += 5
        pass_value(chat_id, result, number_of_string, 'point')
        sol_help = int((show_card_by_number_of_row(chat_id, 1))[10])
        sol_help += 1
        pass_value(chat_id, sol_help, 1, 'sol_help')
        count_of_solves = int((show_card_by_number_of_row(chat_id, 1))[6])
        count_of_solves += 1
        pass_value(call.message.chat.id, count_of_solves, 1, 'count_of_solves')
        bot.delete_message(chat_id, call.message.message_id)
        start_solving(chat_id)
#üü¢
    elif call.data.startswith('button_pressed_great:'):
        number_of_string = int(call.data.split(':')[1])
        # —Å–º–æ—Ç—Ä–∏–º –æ—á–∫–∏ —á—Ç–æ–±—ã —Å–ª–æ–∂–∏—Ç—å –∏–ª–∏ –≤—ã—á–µ—Å—Ç—å
        result = int((show_card_by_number_of_row(chat_id, number_of_string)[9]))
        result += 10
        pass_value(chat_id, result, number_of_string, 'point')
        sol_help = int((show_card_by_number_of_row(chat_id, 1))[10])
        sol_help += 1
        pass_value(chat_id, sol_help, 1, 'sol_help')
        count_of_solves = int((show_card_by_number_of_row(chat_id, 1))[6])
        count_of_solves += 1
        pass_value(call.message.chat.id, count_of_solves, 1, 'count_of_solves')
        bot.delete_message(chat_id, call.message.message_id)
        start_solving(chat_id)
###########################################
bot.infinity_polling()